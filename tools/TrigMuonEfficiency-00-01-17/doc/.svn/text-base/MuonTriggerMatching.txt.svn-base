*****************************************************************
*** standalone muon trigger matching code for ntuple analysis ***
*****************************************************************

The package will work on NTUP_SMWZ or any other ntuples which
includes MuonTriggerD3PDMaker blocks.

- e-mu trigger is under consideration

Installation
============
0) change directory to util

1) type "setup.sh <path to header file>"
     where <path to header file> is the path to the header file generated by
     a) MakeSelector() / MakeChain()
       or
     b) D3PDMakerReader for trigger variables

     [the generated header file by MakeSelector() / MakeChain() or D3PDMakerReader
      should contain the following variables
      - trig_DB_SMK
      - trig_Nav_n
      - trig_Nav_chain_ChainId
      - trig_Nav_chain_RoIType
      - trig_Nav_chain_RoIIndex
      - trig_RoI_EF_mu_Muon_ROI
      - trig_RoI_EF_mu_TrigMuonEFInfoContainer
      - trig_RoI_EF_mu_TrigMuonEFInfoContainerStatus
      - trig_RoI_L2_mu_CombinedMuonFeature;
      - trig_RoI_L2_mu_CombinedMuonFeatureStatus;
      - trig_RoI_L2_mu_MuonFeature;
      - trig_RoI_L2_mu_Muon_ROI;
      - trig_EF_trigmuonef_track_CB_pt
      - trig_EF_trigmuonef_track_CB_eta
      - trig_EF_trigmuonef_track_CB_phi
      - trig_EF_trigmuonef_track_SA_pt
      - trig_EF_trigmuonef_track_SA_eta
      - trig_EF_trigmuonef_track_SA_phi
      - trig_EF_trigmugirl_track_CB_pt
      - trig_EF_trigmugirl_track_CB_eta
      - trig_EF_trigmugirl_track_CB_phi
      - trig_L2_combmuonfeature_eta;
      - trig_L2_combmuonfeature_phi;
      - trig_L2_muonfeature_eta;
      - trig_L2_muonfeature_phi;
      - trig_L1_mu_eta;
      - trig_L1_mu_phi;
      - trig_L1_mu_thrName
     ]

2) type ...
   a) "make Makefile.StandAlone" for analysis based on MakeSelector() / MakeChain()
   b) "make Makefile.RootCore" for analysis based on D3PDMakerReader


Usage
=====
0) in your root analysis macro, include the following line
   "gSystem->Load("<path to TrigMuonEfficiency>/lib/libTrigMuonEfficiency.so");"

1) in your analysis code, include the following line
   #include "TrigMuonEfficiency/MuonTriggerMatching.h"

2) in your analysis code, make a MuonTriggerMatching object by
    MuonTriggerMatching tool = MuonTriggerMatching(<class object>);
   where <class object> is an instance of the class defined in header file
   produced by "MakeClass()" / "MakeSelector()" or pointer to D3PDReader object for trigger variables

   RECOMMENDED: if you have "physicsMeta/TrigConfTree" available in your
   analysis job try the following
    MuonTriggerMatching tool = MuonTriggerMatching(<class object>, <TTree pointer for physicsMeta/TrigConfTree);

3) single muon trigger:
   in event loop, call
    tool.match(<eta>, <phi>, <chain name>);
   where <eta>, <phi> are offline muon information and <chain name> is an EF muon trigger name, ex. "EF_mu18_MG"

   if you need to use an EF chain with different level1 threshold, try
    tool.match(<eta>, <phi>, <chain name>, <level1 threshold>);
   where <level1 threshol> is Level1 muon threshold name, ex. "L1_MU11"

   the method returns true if matching trigger object is found false otherwise



List of triggers available for matching
with the following constructor
 tool = MuonTriggerMatching(<class object>)
=======================================
EF_mu18
EF_mu18_medium
EF_mu18_MG
EF_mu18_MG_medium
EF_mu40_MSonly_barrel
EF_mu40_MSonly_barrel_medium

# eof
